
- interfaces, types and type annotations are erasable, they cannot affect the
runtime behavior of the code. They are a static treaty and part of the
transpilation process is to remove them from your code.
- many good and bad things happen because of Typescript's Structural Typing.

================================================================================
Glossary

any: tells the TypeScript compiler to disable type checking for a variable, allowing it to hold a value of any type.
  - it silences the type checker and TypeScript language services.
as: operator for performing Type Assertion.
  - as is a type operation and hence cannot affect runtime behavior.
Assignable: word that appear in error messages. In the context of sets it means either 'member of' or 'subset of'.
Coalescing Operator: a ?? b returns b if a is null or undefined.
  - it servers as a way to provide default values or fallbacks for potentially null or undefined values.
Compile Time Errors: errors detected by the compiler before the program runs.
Declared Types: types that are explicitly defined by the programmer in interfaces, type aliases, classes, and enums, among others.
  - these types can be used to annotate variables, function parameters, return types, and more.
  - these types enable Typescript's static type checking.
Discriminated Unions: aka Tagged Unions.
Duck Typing: type system where an object's compatibility or equivalence with a certain type is determined based on the object's properties and methods.
  - aka Structural Typing.
  - "If it looks like a duck, swims like a duck, and quacks like a duck, then it probably is a duck"
Function Overloading: C++ feature that allow you to define multiple versions of a function that differ only in the types of their parameters.
  - You can provide multiple declarations for a function in Typescript, but only a single implementation.
instanceOf: used to check if an object is an instance of a specific class or constructed function.
  - it even looks at the prototype chain to see if there anything related in the whole hierarchy.
  - you can't instanceof types, interfaces and type annotations.
Language Services: set of tools and features provided by the TypeScript compiler (tsc) such as code completions, signature help, type checking, refactoring, and more.
Literal Types: types whose Type Domain contain only single values.
  > type A = 'A';
Narrowing: refine the type of a variable to be more specific than its initial type.
  - you can achieve it using 'Type Guards', if statements, 'in' keyword, etc
Never: type that contains no values. It's Type Domain is the empty set.
  > const x: never = 12; // Not assignable
noEmitOnError: transpiler option that don't generate any code if the transpiler finds any kind of error.
noImplicitAny: transpiler option that will require all your variables to be type annotaded. There will be no implicit any type infered.
noImplicitThis: issue an error if the this keyword is implicitly typed as any.
  - better option to avoid this error is to use arrow functions that inherits 'this' from the surrounding scope.
null: represent intentional absence of a meaningful value and must be explicitly assigned.
  - check Undefined to compare the differences
  - oddly enough, in JavaScript typeof null is "object".
Object Literal:  syntactic construct used to create objects using key-value pairs enclosed in curly braces '{}'.
Property: named attribute or member of an object or interface or type that holds a value.
Property Checking: it's a workaround based in Tagged Union to allow type checking in runtime.
Runtime Exception: error that occurs during the execution of a program, after it has successfully compiled and started running.
  - it's preferable to have compile-time errors.
Sealed Type: not supported by typescript. It would assume that functions would be called with arguments having properties you've declared an no others.
  - aka Precise Type.
  - in Typescript's type system the types are 'open'.
Static Type Checking: process of verifying the types of variables, parameters, return values, and expressions in your code at compile time, rather than at runtime.
strict: transpiler option that enables a stricter type-checking mode, which can help catch additional type errors and potential bugs in your code.
  - it will include 'strictNullChecks', 'strictBindCallApply', 'strictFunctionTypes', 'strictPropertyInitialization', 'noImplicitAny', 'noImplicitThis', 'alwaysStrict'.
strictFunctionTypes: compiler option that enhances type safety for function types using contravariant parameter type checking for functions.
  - it's like Liskov Substitution Principle applied to function types and their parameters.
  - a function type (a: Base) => void can be assigned to a variable of a function type (b: Derived) => void (where Derived is a subtype of Base), but not vice versa.
strictNullChecks: compiler option that, when enabled, makes TypeScript type checking more stringent regarding null and undefined.
  - With strictNullChecks turned on, null and undefined are only assignable to any or their respective types (and undefined is also assignable to void).
  - If you want to assign null or undefined to a variable, you'll have to make it explicit.
  > const x: number | null = null;
Structural Typing: check Duck Typing.
Tagged Union: specifying a common property (the tag) across each type in the union.
Transpile: convert your typescript/javascript code to an older version of javascript that works in browsers.
ts-node: typescript execution engine.
  - you run your code directly from the .ts file.
tsc: the typescript transpiler. It also check your code for type errors.
  - you transpile your code into some /dist folder and then you run node on the javascript code generated.
tsserver: TypeScript standalone server which provides language services such as autocomplete, inspection, navigation, and refactoring.
Tuple Type: special type of array with a fixed number of elements whose types are known, but need not be the same.
  > let user: [number, string] = [1, "John Doe"];
type: keyword that declare a Type
  > type AB12 = 'A' | 'B' | 12;
Type: specify Variables so that they can assume a value among a set of possible values (Type Domain).
Type Annotation: explicitly specify the type of variables, function parameters, return types, and properties.
  - provided after a colon (:) following the name of the variable, parameter, or property.
  - Variable Annotation | let userName: string = "John Doe";
  - Function Parameter and Return Type Annotation | function greet(name: string): string { ... }
  - Array Type Annotation | let list: number[] = [1, 2, 3]; or let anotherList: Array<number> = [1, 2, 3];
  - Object Type Annotation: let user: { name: string; age: number } = { ... };
Type Assertion: a way to tell the TypeScript compiler that you know more about the type of a value than TypeScript can infer on its own.
  > let someValue: any = "this is a string";
  > let strLength: number = (someValue as string).length; or
  > let strLength: number = (<string>someValue).length;
Type Check: narrow down the types of some variable by using checks such as if statements.
  - the primary use case is to exclude null type.
  > if (el) { el.textContent = 'Ready'; // OK, null has been excluded }
Type Checker: core component of the TypeScript compiler (tsc) that analyzes your code to ensure that it adheres to the type rules.
  - it consists of: Type Inference, Type Checking, Error Reporting, Code Analysis.
Type Declaration: check Type Annotation.
Type Domain: set of possible values.
Type Inference: you don't have to explicitly provide type annotations. It works with Implicit Typing, you don't always need Explicit Types.
Type Safety: enforcement of type constraints during the development process mainly through Compile-Time Type Checking.
Type System: machinery to describe the shape and behavior of data throughout your application.
  - it consists on things like: Static Type Checking, Type Inference, Generics, Type Guards, etc
Undefined: represent the absence of a meaningful value. It is automatically assigned to a variable that has been declared but not initialized.
Union Unit Types: use OR operator to create types with Type Domain with two or three values.
  > type AB12 = 'A' | 'B' | 12;
Value: at runtime every variable has a value.
  - before the code runs, each variable only has a Type.