
================================================================================
Glossary

Assignable: word that appear in error messages. In the context of sets it means either 'member of' or 'subset of'.
Coalescing Operator: a ?? b returns b if a is null or undefined.
  - it servers as a way to provide default values or fallbacks for potentially null or undefined values.
Literal Types: types whose Type Domain contain only single values.
  > type A = 'A';
Narrowing: refine the type of a variable to be more specific than its initial type.
  - you can achieve it using 'Type Guards', if statements, 'in' keyword, etc
Never: type that contains no values. It's Type Domain is the empty set.
  > const x: never = 12; // Not assignable
Null: represent intentional absence of a meaningful value and must be explicitly assigned.
  - check Undefined to compare the differences
strictNullChecks: compiler option that, when enabled, makes TypeScript type checking more stringent regarding null and undefined.
  - With strictNullChecks turned on, null and undefined are only assignable to any or their respective types (and undefined is also assignable to void).
Type: specify Variables so that they can assume a value among a set of possible values (Type Domain).
Type Domain: set of possible values.
Undefined: represent the absence of a meaningful value. It is automatically assigned to a variable that has been declared but not initialized.
Union Unit Types: use OR operator to create types with Type Domain with two or three values.
  > type AB12 = 'A' | 'B' | 12;
Value: at runtime every variable has a value.
  - before the code runs, each variable only has a Type.