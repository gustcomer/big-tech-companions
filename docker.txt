
build the image. 
  > docker build .
build the image with some name and optionally a tag name:tag
  > docker build -t node-app-image .
  -t option stands for tag

check for images created
  > docker image ls

remove an image
  > docker image rm ab6e14e9e48c

run a container
  > docker run -d --name node-app node-app-image
  -d is detached mode so that you can use your prompt
  node-app is the name of the container
maps the local port 4000 to the container port 3000
  > docker run -p 4000:3000 -d --name node-app node-app-image
run with a bind mount - only use it in development mode
  > docker run -v %cd%:/app -p 4000:3000 -d --name node-app node-app-image
workaround to preserve the builded node_modules folder in the container
  > docker run -v %cd%:/app -v /app/node_modules -p 4000:3000 -d --name node-app node-app-image
use a read only bind mount
  > docker run -v %cd%:/app:ro -v /app/node_modules -p 4000:3000 -d --name node-app node-app-image
use environment variable
  > docker run -v %cd%:/app:ro -v /app/node_modules --env PORT=4000 -p 3000:4000 -d --name node-app node-app-image
use environment variable with environment file
  > docker run -v %cd%:/app:ro -v /app/node_modules --env-file ./.env -p 3000:4000 -d --name node-app node-app-image

shows running containers
  > docker container ls
  > docker ps
show both the running and the stopped containers
  > docker ps -a

stop a running container
  > docker stop traefik

remove a container after it's stopped
  > docker rm traefik
remove a container even if it's running (force)
  > docker rm node-app -f
remove also any volume associated with the container
  > docker rm node-app -fv

open bash on or docker file container
  > docker exec -it node-app bash
  - i: keep STDIN open t: alocate pseudo-TTY

check the logs of a container
  > docker logs node-app

check the docker volumes
  > docker volume -ls

remove some docker volume
  > docker volume rm fb8093aa3ec7066c70cd75ef051cb517c4af6dd1049f72a8767450e2d5b20371
  > docker volume prune # deprecated
  > docker volume prune --filter all=1

gets a ton of information about a container
  > docker inspect docker-experiments-holborn-node-app-1

gets more specific information about the network
  > docker network inspect docker-experiments-holborn_default

lists all the networks the Engine daemon knows about.
  > docker network ls

================================================================================
Docker Glossary

Bind Mount: a file or directory on the host machine is mounted into a container.
  - dependent on the directory structure and OS of the host machine.
  - when you use a volume, a new directory is created within Docker's storage directory on the host machine, and Docker manages that directory's contents.
Container: self-contained, runnable software application or service. It loads an Image like a set of instructions.
Image: lightweight, standalone, executable software template that includes everything needed to run a piece of software, including the code, runtime, system tools, libraries, and settings.
Image Id: id to reference some Docker Image, random number.
Tag: custom, human-readable manifest identifier that's typically a specific version or variant of an image. Usually it is some kind of version.
  - eg: 1.2 or 8.1-magento2-xdebug3 or 8.0.1-cli
Volume: preferred mechanism for persisting data generated by and used by Docker containers.
  - it's persisted data, usually you don't want to delete them.

================================================================================
Dockerfile Glossary

ARG: declares a variable that users can pass at build-time to the builder with the docker build command using the --build-arg <varname>=<value> flag.
  - note that it is only the declaration. Tue variable can also be passed via docker-compose
CMD: runs at build time the specified command a container from an image.
  - CMD works at build time while RUN works at runtime.
  > CMD ["node", "index.js  "]
COPY: copies new files or directories from local and adds them to the filesystem of the container.
  > COPY package.json .
ENV: sets the environment variable <key> to the value <value>.
  > ENV MY_NAME="John Doe" ou > ENV PORT 3000
  - used for production or default values.
  - you can set the environment variable via --env flag on the run command.
EXPOSE: informs Docker that the container listens on the specified network ports at runtime.
  - you can specify whether the port listens on TCP or UDP, and the default is TCP if you don't specify a protocol.
  > EXPOSE 3000
FROM: sets the base image for subsequent instructions
  > FROM node:21
RUN: execute at build time any commands to create a new layer on top of the current image.
  > RUN npm install
WORKDIR: sets the working directory for any RUN, CMD, ENTRYPOINT, COPY and ADD instructions that follow it in the Dockerfile.