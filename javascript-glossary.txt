# Javascript Glossary

arguments: object that contains the arguments passed in the form of an array.
Arrow functions(javascript.md#arrow-functions): don't have their own bindings to this, arguments, or super, and should not be used as methods.
  - arrow functions inherit 'this' from the surrounding scope at the time it was defined, for instance inside an object.
  - eg: const add = (a, b) => a + b;
  - it is kinda the inverse of Conventional Function.
  - arrow functions does not have its own 'arguments' object while conventional functions have.
  - arrow functions are anonymous unless assigned to a variable or property. const myFunc = () => {};
  - the this keyword always represents the object that defined the arrow function. Different from regular functions where the this keyword represents the object that called the function.
Bind()(javascript.md#bind-function): an object can borrow a method from another object.
Binding: process of associating functions with specific objects.
  - this is done by controlling the context in which a function is called via the 'this' keyword.
  - there is Implicit Binding when a function is called as a method of an object, where this implicitly refers to the object that called the method.
  - there is also Explicit Binding done by using methods such as bind(), call() and apply().
  - in the default binding 'this' refers to the global object: 'window' in browsers, 'global' in Node.js. In Strict Mode this is undefined.
  - when passing an object's method as a callback function, the context by default will be the global context or undefined. That's we in callback methods we have to bind the method to the 'this' of the object.
Conditional (ternary) Operator: a condition followed by a question mark (?), then an expression to execute if the condition is truthy followed by a colon (:), and finally the expression to execute if the condition is falsy. 
Currying(javascript.md#currying): currying is a functional programming technique used to transform a function with multiple arguments into a sequence of functions, each taking a single argument.
Default Exports: export a single value or entity from a module.
  - eg: export default greet;  import greet from './modulejs'; or more common: import greet from './module';
  - or yet: export default function greet() {...}
  - there is no need for curly braces, as opposed in the alternative named exports.
  - you can name the imported default export anything you like, unlike named exports which require the exact name.
Destructuring Object(javascript.md#destructuring-object): take an object and extract some of its properties.
  - it allows you to extract values from arrays or properties from Objects.
ES6 Modules: 
Global Object: object that always exists in the global scope.
  - web browsers have a Window as its global object.
  - globalThis allows one to access the global object regardless of the current environment.
Hoist: a variable can be used before it has been declared. It is the default behavior of moving all declarations to the top of the current scope.
Lexical Scope: concept of determining the scope of a variable based on the place of its declaration.
  - aka: Scope
  - Variables should always be declared inside of functions because outside of functions are global variables.
  - types: Global Scope, Local Scope.
map:
  - you can use a index provided by the map as the second argument.
Named Exports: allow you to export multiple values from a module, each with a specific name.
  - eg: export function greet() { ... }; import { greet } from './module';
  - there's a need for the curly braces in the import expression and you can't change the name of the exports.
npx: npm package runner that allows you to run packages without installing them globally.
null: is an assignment value representing the intentional absence of any object value.
  - null means there is no value.
pure function: a function that always produces the same output for the same input and has no side effects.
startsWith(): method to check if a string starts with a specified string.
Response(): interface of the Fetch API represents the response to a request.
  - return new Response("Hello world");
  - return Response.json({ message: 'Hello - GET' });
  - Response.redirect(url)
  - Response.error()
Rest operator:
Scope Chain: hierarchy of places the computer must go through — one after the other — to find the lexical scope (origin) of the specific variable that got called.
splice(javascript.md#splice-method): adds and/or removes array elements. Also it overwrites the original array.
  - array.splice(index, howmany, item1, ....., itemX)
  - index: position to add or remove items; howmany: number of items to be removed. item1, ..., itemX: new elements(s) to be added.
Tagged Template: [Tagged Function] syntactic sugar that is a function call that uses a template literal from which to get its arguments.
  - eg: const result = tag`string text ${expression} string text`;
Template Literal: [Template Strings] more flexible strings that are enclosed by backticks `.
  - you can embed expressions directly within the string using `${expression}` syntax.
  - allow you to create multiline strings without the need for special characters like \n.
  - You can use tagged templates [tagged functions] to parse template literals with a function.
Ternary Operator: check Conditional Operator.
this: keyword that refers to an object.
  - In an object method, this refers to the object.
  - Alone, this refers to the global object.
  - In a function, this refers to the global object.
  - In a function, in strict mode, this is undefined.
  - In an event, this refers to the element that received the event.
  - Methods like call(), apply(), and bind() can refer this to any object.
undefined: means a variable has been declared, but not defined.