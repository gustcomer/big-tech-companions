================================================================================
Glossary

@: [at-rules, directives] CSS statements that instruct CSS how to behave.
  - General structure: @identifier (RULE);
: pseudo-classes. they consist of a colon : followed by the pseudo-class name.
@apply: it's a way of using tailwind utility classes inside .css files to create a class from these utility classes.
  - eg: .cartao { @apply w-60 rounded-md p-2 shadow grid gap-y-2 bg-yellow-400 }
aspect ratio: proportional relationship between the width and height of an element.
box model: describes how every web element is modeled.
  - composed of Content Area, Padding, Border, Margin.
cap: height of the capital letter.
CSS Houdini: set of APIs that expose parts of the CSS renderind mechanism.
  - allows access to the CSS Object Model (CSSOM).
custom property: allow for property type checking and constraining, setting default values, and defining whether a custom property can inherit values or not.
  - define variables using double hyphen prefix --variable-name: value; eg: :root { --primary-color: #3498db; --secondary-color: #2ecc71; --font-size: 16px; }
  - to access the value of a CSS variable use the var(--variable-name) eg: body { color: var(--primary-color); background-color: var(--secondary-color); font-size: var(--font-size); }
  - it's like CSS variables on steroids.
  - @property CSS at-rule is part of the CSS Houdini umbrella of APIs.
dpi: dots per inch
flex
  flex: sets how a flex item will grow or shrink to fit the space available in its flex container.
    - it is a shorthand for flex-grow, flex-shrink, flex-basis.
    display: flex; turns the element into a flex container. By default, flex-direction: row;
    justify-content: flex-start; Items are positioned starting from the left (in left-to-right layouts).
    align-items: stretch; stretch items vertically to fill the container
  flex-basis: sets the initial main size of a flex item. It sets the size of the content box unless otherwise set with box-sizing.
  flex-grow: flex grow factor, which specifies how much of the flex container's remaining space should be assigned to the flex item's main size.
  flex-shrink: flex shrink factor of a flex item. If the size of all flex items is larger than the flex container, items shrink to fit according.
grid
  gap: property that allows to adjust spacing between elements in grid layout
  fr: fractional unit used in grids. 1fr represents 1 part of the available space.
    - only use it when you want the grid to be fluid, like a calendar, etc.
    - better than percentages because they don't take into account the gap.
hr: horizontal rule. indicates a thematic break or a shift in topic between paragraphs or sections.
  - When you use border: 1px solid;, you’re effectively adding borders on all sides of the element (top, right, bottom, left). By using border-top, you ensure the line only appears at the top edge of the <hr>.
images: you can add images to your document with <img> tag or background-image css property if they are more decorative.
<img>:
  - object-fit you can control how the image being imported fills its <img> container.
@layer: declares a cascade layer and defines the order of precedence in case of multiple cascade layers.
  - the stylings in the last layer will precede the stylings in the former layers.
measures
  Absolute Length Units: px, pt, pc, in, mm, cm.
    px: 1px = 1/96th of 1in.
      - for low-dpi devices it will be one device pixel (and hence relative length unit)
      - You can calculate the size of a pixel for any display device dividing the size of the display screen by the resolution. 
      - for small details such as borders, shadows, etc, you can use pixels.
  Relative Length Units: em, ex, ch, vw, rem, vh, vmin, vmax, %
    rem: unit relative to the font-size of the root element.
    em: unit relative to the font-size of the parent element.
      - (2em means 2 times the size of the current font)
      - usual ly it is relative to the parent font size, so in a document 1em could mean diferent things
      - related: rem.
      - usefull when we need the font size to be relative to the font-size of the parent element
    svh: small vieport height
      related: dvh: dynamic vieport height; lvh: large viewport height.
    vh: relative to the viewport's height. 1vh is equal to 1% of the viewport's height.
    vw: relative to the viewport's width. 1vw is equal to 1% of the viewport's width.
    ex: height of the letter x
@media: at rule that check media queries. It will apply its content if the device meets the criteria of the condition defined using a media query.
  media types: all, print, screen. -- if nothing is defined, all is assumed.
  media features: device-width, prefers-color-scheme, prefers-reduced-motion
media queries: allow you to apply CSS styles depending on a device's media type or other characteristics.
  - prefers-reduced-motion: CSS media query to detect if a user has requested reduced motion in their system preferences. if yes, disable animations and transitions.
nesting: practice of writing CSS rules inside other CSS rules
  - by default, when you nest something, it's like a descendant selector since it adds an space. To use with pseudoclasses or class selectors, don't forget to ue ampersand &.
  descendant nesting -- { ... .myclass{..} }
  pseudoclass nesting -- { ... &:hover{} }
  - a great example of nesting is with media queries. You can nest all your media queries inside <html>, for instance.
object-fit: control how an element like an image or a video fits within its container.
  object-fit: cover - ensures that the content fills the entire container while maintaining its aspect ratio.
  other values: fill, contain, cover, none.
outline: it looks like a border, but it's placed outside the border and doesn't take space.
  - border's are part of the box model while outlines aren't.
  - use cases: focus
overflow: controls how content is handled when it overflows its container width or height. Should a scroll appear?
  overflow: visible (default) – Content overflows the container and is not clipped.
  overflow: hidden – Content is clipped and does not show outside the container.
  overflow: scroll – Always adds a scrollbar, even if the content fits within the container.
  overflow: auto – Adds a scrollbar only when the content overflows.
  overflow: clip – Similar to hidden, but without allowing interaction with the clipped content.
    - you can define a overflow-clip-margin so that the text overflows just a little bit.
  overflow: overlay – Works like auto, but scrollbars overlay the content instead of affecting layout.
  overflow-x: scroll, overflow-y: hidden - you can define overflow separately for horizontal and vertical scrolling.
prefers-color-scheme:  CSS media feature is used to detect if a user has requested light or dark color themes.
  - a user indicates their preference through an operating system setting (e.g. light or dark mode) or a user agent setting.
@property: check custom property.
  - @property at-rule
:root : pseudo-class in CSS is used to select the highest-level parent element in the document tree. In an HTML document, this is always the <html> element.
  - It is similar to the html selector, but it has higher specificity (it overrides the normal html selector).
  - it ensures that variables and styles are scoped globally.
  - one of the most common uses is to define CSS variables that are available throughout the entire document.
Selectors
  Simple Selectors
    Universal Selector -- * { ... }: 
    Element Selectors -- p {...} - selects all p elements
    Id Selectors -- #para1 {...} - applies the rules to all id="para1"
    Class Selectors -- .center {} - applies to all elements with class="center"
  Attribute Selectors
    CSS [attribute] Selector -- a[target] { ... } -- specified attribute
    CSS [attribute="value"] Selector -- a[target="_blank"] { ... } -- specified attribute and value -- 
    CSS [attribute~="value"] Selector -- [title~="flower"] { ... } -- elements with an attribute value containing a specified word 
    CSS [attribute|="value"] Selector -- [class|="top"] { ... } -- elements with the specified attribute or followed by a hyphen
    CSS [attribute^="value"] Selector -- [class^="top"] { ... } -- select elements starting with the specified attribute value
    CSS [attribute$="value"] Selector -- [class$="test"] { ... } -- attribute value ends with a specified value
    CSS [attribute*="value"] Selector -- [class*="te"] { ... } -- attribute value contains a specified value.
  Combinator Selectors
    (single space) Descendant Combinator -- div p -- Selects all <p> elements inside <div> elements.
    > Child combinator -- div > p -- Selects every <p> element that are direct children of a <div> element.
    | Namespace separator -- ns | h2 -- Selects all <h2> elements in namespace ns. (namespaces are more used in <svg>).
    + Next-sibling combinator -- 	div + p -- Selects the first <p> element that is placed immediately after <div> elements.
    , Grouping Selector -- div, p -- Selects all <div> elements and all <p> elements.
    ~ Subsequent-sibling combinator -- p ~ ul -- Selects all <ul> elements that are preceded by a <p> element.
    & Nesting Selector - Applies styles for an element within the context of another element
    . Class Selector -- div.class1 - select all divs with class1 Can be seen as a combinator selector.
  Pseudo-elements: specify parts of an element
    ::after -- p::after Insert something after the content of each <p> element
    ::before -- p::before Insert something before the content of each <p> element
    ::first-letter -- p::first-letter Selects the first letter of each <p> element
    ::first-line -- p::first-line Selects the first line of each <p> element
    ::marker -- ::marker Selects the markers of list items
    ::selection -- p::selection Selects the portion of an element that is selected by a user
  Pseudo-class Selectors: represent special state of an element
    selector:pseudo-class { ... }
    :link - unvisited
    :visited - visited
    :hover - mouse over
    :active - selected
    :first-child
    :lang - specific languages
@tailwind: used in Tailwind CSS to include different layers of styles that Tailwind provides. It is connected to @layer.
  eg: @tailwind base; @tailwind components; @tailwind utilities;
transforms: allow you to move, rotate, scale, and skew elements.
  2D: translate(), rotate(), scale(), skew(), matrix(), scaleX(), scaleY(), skewX(), skewY().
  3D: rotate3d(), scale3d(), matrix3d(), translate3d(), rotateX(), rotateY(), rotateZ(), perspective(), etc.
  - while transform should be nested so that the transformation occurs when the user hovers something, transition should be place above on the base class, so that the base class know how to process the transform.
variables: check Custom Properties because they are the same.
white-space: CSS property sets how white space inside an element is handled.
  normal: Sequences of white space are collapsed to one whitespace. Newline characters in the source are handled as white spaces. Lines are broken as necessary to fill line boxes.
  pre-wrap: Sequences of white space are preserved. Lines are broken at newline characters, at <br>, and as necessary to fill line boxes.
  others: nowrap, pre, pre-line, break-spaces.
wrap: usually refers to how user-entered text should be split into lines.

================================================================================
API

clamp()
  - useful for font-size responsiveness
lh: line height.
min-width:
  - useful in flex context where thinks should grow and shrink, but keeping a minimum and maximum
  - related: max-width
object-fit: controls how an image fills its container.
  object-fit: cover -- keeps the aspect ratio of the content and ensures the image cover the entire <img> container but will be cropped in height or width. 
  object-fit: contain -- keeps the aspect ratio of the content and scales the image to fit within the container while maintaining aspect ratio. This means that some spaces may apper in the corner of the height or the width.
  object-fit: fill (default behaviour) -- it stretches the image deforming its aspect ratio so that it fills the entire width and height of the container.
  object-fit: none -- keeps the image’s original size, can overflow container
  object-fit: scale-down -- chooses the smaller of none or contain.
overflow-anchor: allows you to not loose the scroll position when new overflowed data appears.
overflow-clip-margin:
text-overflow: property to cut overflowing text
  - text-overflow: clip, ellipsis

================================================================================
resources
  https://www.w3schools.com/css/
  https://css-tricks.com/
  https://maujor.com/
  https://whatunit.com/
  https://css-tricks.com/snippets/css/a-guide-to-flexbox/
  https://github.com/bradtraversy/50projects50days