
make ... be centered along the cross and main axis. being centered right in the middle of the screen.
  <div className="h-full flex items-center justify-center">...</div>

centers some text
  <p className="text-center">Run your agency, in one place</p>


================================================================================
TAILWIND GLOSSARY

Arbitrary Values: use to break out of design systems values and use a Custom Style.
selection: is related to a pseudo-element responsible for styling selected elements.
  - eg: selection:bg-cyan-* selection:text-cyan-* 
  - it can style the background of the selection, the selected text, etc
@tailwind: used in Tailwind CSS to include different layers of styles that Tailwind provides. It is connected to @layer.
  @tailwind base;: includes the base layer of Tailwind CSS. It contains the base styles, which are primarily CSS resets and default styles for HTML elements.
    - These styles ensure a consistent starting point for your project by normalizing the default browser styles.
    eg: resetting margins and paddings, setting default font styles, and other foundational styles.
  @tailwind components;: includes the component layer of Tailwind CSS. It is used for predefined component classes that provide more complex styles than the base layer.
    - These classes can be used to style common UI components like buttons, forms, cards, etc.
  @tailwind utilities;: includes the utility layer of Tailwind CSS. It contains all the utility classes that you use to apply specific styles directly to elements.
Viewport

================================================================================
Pure CSS related

Cross Axis: in flexbox runs perpendicular to the main axis.
  - Your flex-direction is by default row, so Cross Axis by default is column.
Display: sets whether an element is treated as a block or inline box and the layout used for its children, such as flow layout, grid or flex.
  - block, inline, inline-block, none, flex, grid.
  block: line breaks both before and after the element when in the normal flow.
    - display:block. Relativo a Display.
flex: create a flex container.
  - block means that each element has it's own box.
  flex-x: control how flex items both grow and shrink.
    - eg: flex-1 stands for flex: 1 1 0%;
  flex-col: position flex items vertically.
  Flex Container: 
  Flex Direction: establishes the main-axis whix is the direction flex items are placed in the flex container.
    - by default de direction is row.
Height: related to the height of its parent
Main Axis: 
Position: static, relative, fixed, absolute, sticky.
  absolute: when we use absolute, the top and left coordinates will be relative to the containing block (usually will be the browser itself).
    - the absolute element no longer exist in the document flow, and the following elements won't take it into account when positioning themselves.
    - used in conjunction with relative.
    - position: absolute. relates to Position.
  fixed: utility to position an element relative to the viewport. It always stays in the same place even if we scroll the page.
  relative: when we use relative, the top and left coordinates will be relative to the normal flow (usually the element above).
    - without relative, position coordinates such as top, right, won't work.
    - act as a position reference for absolute children.
    - position the element according to the normal flow. Hence the following elements will take it into account when positioning themselves.
    - used in conjunction with absolute where the Relative Parent act as reference to some Absolute child.
    - similar to static, but will act as containing block for its children.
    - related: static, fixed, absolute, sticky
  static: not affected by the top, bottom, left, and right properties
    - position the element according to the normal flow.
    - will not act as a position reference for absolute children.
    - html elements are positioned static by default

================================================================================
Tailwind API

antialiased: control the font smoothing of an element.
  -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale;
bg-black: set background color to black.
border-*: control the width of an element's border.
  - eg: border-y-* (border top and border bottom), border-l-* (just left border)
bottom-*: utility for controlling the placement of positioned elements.
  related: top-*, right-*, left-*
font-bold: utility used for controlling the Font Weight of an element.
  - related: font-thin, font-medium, font-semibold, hover:font-bold, font-[1100]
  - some measures: thin => font-weight: 100, normal: 400, bold: 700, black: 900
gap-*: change the gap between both rows and columns in grid and flexbox layouts.
gradients: give an element a linear gradient background.
  bg-gradient-to-*: used to color with gradient.
    t-top, tr-top right, r-right, br-bottom right, b-bottom, bl-bottom left, l-left, tl-top left.
  - use it together with from-*-* to-*-*. eg: from-cyan-500 to-blue-500
h-full: set the height of an element to 100% of the height of its parent. height: 100%;
  - check: h-screen
h-screen: set the height of an element to 100% of the viewscreen height. height: 100vh;
  - check: h-full
hidden: same thing as display:none.
inset-x-*: sets both the position at right and left. The width will be a consequence.
  : related: inset-y-*, top, bottom, left, 
items-center: make flex items be aligned centered around flex container's Cross Axis (by default height).
  related: justify-center
justify-center: control how flex and grid items are positioned along a container's main axis.
  related: items-center
max-w-: set the maximum width of an element
md: : apply the following properties only if the size is greater than md.
  related: sm:, lg:, xl:, 2xl:
mx-*: adjust margin-left and margin-right.
  - mx-auto: margin-left: auto; margin-right: auto; evenly distribute the unused horizontal space between the left and the right.
object-cover: controls how an image or other media element (like a video) is resized to fit its container.
  css> object-fit: cover; -- ensures that the media fills its container while maintaining its aspect ratio.
opacity-*: control the opacity of an element in %. 100 is solid, 0 is invisible. 
outline: control the style of an element's outline, default is a solid line.
  - outline-dashed, outline-dotted, outline-double.
overflow-clip: used to be a shortcut to text-overflow: clip, but browsers added a real overflow: clip property
  - text-clip, in the new tailwind versions.
  - related: text-ellipsis
p-*: control the padding on all sides of an element
  pt-*: utilities to control the padding on top of the element.
    - related: pt, pr, pb, pl.
  px-*: utility to control the horizontal padding. (left and right), or yet, on x axis.
  py-*: control vertical padding of an element.
rounded-tl-2xl: control the Border Radius of an element
  - eg: rounded-sm (adjusts all borders), rounded-tr-* (adjusts the top right), rounded-l-* (adjusts top left and bottom left).
sticky: behaves like static until the scroll reache s it, after that starts behaving like fixed.
text-[*px]: set the font size using Arbitrary Values, that is, pixels.
  - related: text-sm, text-sm, text-xl, text-5xl
  - text-[--text]: set the font size to the value in the variable --text that could be defined in the root.
text-center: centers the text.
  - related: text-left, text-center, text-right, text-justify.
text-clip: truncate the text at the limit of the content area.
  - related: text-ellipsis
text-ellipsis: truncate overflowing text with an ellipsis ...
  - related: text-clip.
top-*: top position of the element in relation to the containing block.
translate-x-*: used to translate an element.
  - it doesn't change the calculated width, length, etc. and that's the diference to top, right, etc.
  - to use negative values, use -translate-y-6 for instance
w-full: would set the width of an element to 100% of its parent. but usually that's the default, so not necessary.

================================================================================
Resources

https://github.com/aniftyco/awesome-tailwindcss#readme